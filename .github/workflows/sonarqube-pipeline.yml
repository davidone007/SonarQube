name: CI/CD - SonarQube Analysis with Trivy

on:
  push:
    branches:
      - "**" # Se ejecuta en cada push a cualquier rama
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: "18"

jobs:
  # Job 1: Análisis de seguridad con Trivy
  trivy-security-scan:
    name: 🔒 Trivy Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run Trivy vulnerability scanner (Filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "0" # No fallar el build por vulnerabilidades

      - name: 📊 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true # No fallar si GitHub Advanced Security no está habilitado
        with:
          sarif_file: "trivy-results.sarif"

      - name: 🔍 Run Trivy vulnerability scanner (JSON report)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "json"
          output: "trivy-report.json"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: 📤 Upload Trivy JSON report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-report
          path: trivy-report.json
          retention-days: 30

  # Job 2: Tests y Coverage
  test-and-coverage:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    needs: trivy-security-scan

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests with coverage
        run: npm run test:cov
        continue-on-error: true

      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # Job 3: Análisis de SonarQube
  sonarqube-analysis:
    name: 📊 SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test-and-coverage

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests with coverage
        run: npm run test:cov
        continue-on-error: true

      - name: 📊 SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=aromalife-backend
            -Dsonar.sources=src
            -Dsonar.tests=test
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts,**/test/**,**/dist/**,**/coverage/**,**/scripts/**,**/postgres-data/**,**/pgadmin-data/**,**/terraform/**

      - name: ✅ SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true # No fallar el build si no pasa el Quality Gate

  # Job 4: Reporte consolidado
  security-report:
    name: 📋 Security Report Summary
    runs-on: ubuntu-latest
    needs: [trivy-security-scan, sonarqube-analysis]
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download Trivy report
        uses: actions/download-artifact@v4
        with:
          name: trivy-security-report
        continue-on-error: true

      - name: 📊 Generate Security Summary
        run: |
          echo "# 🔒 Security & Quality Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📅 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Analysis Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Trivy Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SonarQube Code Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Reports" >> $GITHUB_STEP_SUMMARY
          echo "Check the following tabs for detailed reports:" >> $GITHUB_STEP_SUMMARY
          echo "- **Security:** GitHub Security tab for Trivy findings" >> $GITHUB_STEP_SUMMARY
          echo "- **SonarQube:** ${{ secrets.SONAR_HOST_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts:** Download detailed reports from the Artifacts section" >> $GITHUB_STEP_SUMMARY
